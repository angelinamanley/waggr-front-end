import React from 'react';
import { SemanticDatepickerProps } from '../types';
declare type SemanticDatepickerState = {
    isVisible: boolean;
    selectedDate: Date | Date[] | null;
    selectedDateFormatted?: string;
    typedValue: string | null;
};
declare class SemanticDatepicker extends React.Component<SemanticDatepickerProps, SemanticDatepickerState> {
    static defaultProps: {
        allowOnlyNumbers: boolean;
        clearOnSameDateClick: boolean;
        clearable: boolean;
        date: undefined;
        filterDate: () => boolean;
        firstDayOfWeek: number;
        format: string;
        id: undefined;
        keepOpenOnClear: boolean;
        keepOpenOnSelect: boolean;
        label: undefined;
        locale: any;
        name: undefined;
        onBlur: () => void;
        placeholder: null;
        pointing: string;
        required: boolean;
        selected: null;
        showOutsideDays: boolean;
        type: string;
        readOnly: boolean;
    };
    el: React.RefObject<HTMLDivElement>;
    componentDidUpdate(prevProps: any): void;
    readonly isRangeInput: boolean;
    readonly initialState: {
        isVisible: boolean;
        selectedDate: Date | Date[];
        selectedDateFormatted: string | undefined;
        typedValue: null;
    };
    readonly dayzedProps: {
        [x: string]: any;
    };
    readonly inputProps: {
        placeholder: any;
    };
    readonly date: any;
    readonly weekdays: any[];
    state: {
        isVisible: boolean;
        selectedDate: Date | Date[];
        selectedDateFormatted: string | undefined;
        typedValue: null;
    };
    Component: React.ElementType;
    resetState: () => void;
    mousedownCb: (mousedownEvent: any) => void;
    keydownCb: (keydownEvent: any) => void;
    close: () => void;
    showCalendar: (event: any) => void;
    handleRangeInput: (newDates: any) => void;
    handleBasicInput: (newDate: any) => void;
    handleBlur: (event?: React.SyntheticEvent<Element, Event> | undefined) => void;
    handleChange: (_evt: any, { value }: {
        value: any;
    }) => void;
    handleKeyDown: (evt: any) => void;
    onDateSelected: (dateOrDates: any) => void;
    render(): JSX.Element;
}
export default SemanticDatepicker;
