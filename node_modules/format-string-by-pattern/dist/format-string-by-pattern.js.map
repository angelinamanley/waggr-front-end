{"version":3,"file":"format-string-by-pattern.js","sources":["../src/index.js"],"sourcesContent":["function formatStringByPattern(pattern, value) {\n  if (!value) {\n    return value;\n  }\n\n  const cleanValue = String(value).replace(/[^\\da-zA-Z\\n|]/g, '');\n  const blockSizes = pattern\n    .split(/[^\\da-zA-Z\\n|]/g)\n    .filter(Boolean)\n    .map(b => b.length);\n  const separators = pattern.split(/[\\da-zA-Z\\n|]/g).filter(Boolean);\n  const [firstSeparator] = separators;\n\n  if (pattern.startsWith(firstSeparator)) {\n    const afterReduce = separators.reduce(\n      (acc, cur, index) => {\n        const curBlockSize = blockSizes[index];\n        const beforeSlice = acc.value.slice(0, curBlockSize);\n        const afterSlice = acc.value.slice(curBlockSize);\n        const nextResult = beforeSlice\n          ? acc.result.concat(cur, beforeSlice)\n          : acc.result;\n\n        return {\n          result: nextResult,\n          value: afterSlice,\n        };\n      },\n      {\n        result: '',\n        value: cleanValue,\n      }\n    );\n\n    return afterReduce.result.slice(0, pattern.length);\n  }\n\n  const afterReduce = blockSizes.reduce(\n    (acc, cur, index) => {\n      const curSeparator = separators[index] || '';\n      const replace = `$1${curSeparator}$2`;\n      const curSlice = cur + acc.prevSlice + acc.prevSeparator.length;\n      const curRegex = new RegExp(`(.{${curSlice}})(.)`);\n      const curValue = acc.value.replace(curRegex, replace);\n\n      return {\n        prevSeparator: curSeparator,\n        prevSlice: curSlice,\n        value: curValue,\n      };\n    },\n    {\n      prevSeparator: '',\n      prevSlice: 0,\n      value: cleanValue,\n    }\n  );\n\n  return afterReduce.value.slice(0, pattern.length);\n}\n\nmodule.exports = (pattern, value) =>\n  value\n    ? formatStringByPattern(pattern, value)\n    : curriedValue => formatStringByPattern(pattern, curriedValue);\n"],"names":["formatStringByPattern","pattern","value","const","cleanValue","String","replace","blockSizes","split","filter","Boolean","map","b","length","separators","startsWith","reduce","acc","cur","index","curBlockSize","beforeSlice","slice","afterSlice","result","concat","curSeparator","curSlice","prevSlice","prevSeparator","curRegex","RegExp","module","exports","curriedValue"],"mappings":"AAAA,SAASA,EAAsBC,EAASC,GACtC,IAAKA,EACH,OAAOA,EAGTC,IAAMC,EAAaC,OAAOH,GAAOI,QAAQ,kBAAmB,IACtDC,EAAaN,EAChBO,MAAM,mBACNC,OAAOC,SACPC,aAAIC,UAAKA,EAAEC,SACRC,EAAab,EAAQO,MAAM,kBAAkBC,OAAOC,SAG1D,OAAIT,EAAQc,iBACUD,EAAWE,gBAC5BC,EAAKC,EAAKC,GACThB,IAAMiB,EAAeb,EAAWY,GAC1BE,EAAcJ,EAAIf,MAAMoB,MAAM,EAAGF,GACjCG,EAAaN,EAAIf,MAAMoB,MAAMF,GAKnC,OACEI,OALiBH,EACfJ,EAAIO,OAAOC,OAAOP,EAAKG,GACvBJ,EAAIO,OAINtB,MAAOqB,KAITC,OAAQ,GACRtB,MAAOE,IAIQoB,OAAOF,MAAM,EAAGrB,EAAQY,QAGzBN,EAAWS,gBAC5BC,EAAKC,EAAKC,GACThB,IAAMuB,EAAeZ,EAAWK,IAAU,GACpCb,EAAU,KAAKoB,OACfC,EAAWT,EAAMD,EAAIW,UAAYX,EAAIY,cAAchB,OACnDiB,EAAW,IAAIC,aAAaJ,WAGlC,OACEE,cAAeH,EACfE,UAAWD,EACXzB,MALee,EAAIf,MAAMI,QAAQwB,EAAUxB,MAS7CuB,cAAe,GACfD,UAAW,EACX1B,MAAOE,IAIQF,MAAMoB,MAAM,EAAGrB,EAAQY,QAG5CmB,OAAOC,iBAAWhC,EAASC,UACzBA,EACIF,EAAsBC,EAASC,YAC/BgC,UAAgBlC,EAAsBC,EAASiC"}